print("–ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫...")

import telebot
from telebot import apihelper
from telebot import types
import keyboard
from pynput.keyboard import Controller, KeyCode
import pyautogui
import os
import speech_recognition as sr
import torch
import cv2
import time
import json
import requests
import platform
from PIL import Image
import logging
import sys
import datetime

print(datetime.datetime.now().strftime("%H:%M:%S"), "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

f = open('tg_id.txt', 'r')
tg_id = int(f.read())
f.close()

f = open('tg_token.txt', 'r')
tg_token = f.read()
f.close()

bot = telebot.TeleBot(tg_token);

language='ru_RU'
r = sr.Recognizer()

def recognise(filename):
    with sr.AudioFile(filename) as source:
        audio_text = r.listen(source)
        try:
            text = r.recognize_google(audio_text,language=language)
            print('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...')
            print(text)
            return text
        except:
            print('–ò–∑–≤–∏–Ω–∏—Ç–µ... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')
            return "–¢–µ–∫—Å—Ç –Ω–µ—Ä–∞–∑–ø–æ–∑–Ω–∞–Ω"
Stream = True
def comand(text, message):
    print(text)
    if message.from_user.id == tg_id:
        if text == '‚¨Ü':
            keyboard.send('up')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == '‚ùå':
            keyboard.send('alt+f4')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == '‚¨Ö':
            keyboard.send('left')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == '‚¨á':
            keyboard.send('down')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == '‚û°':
            keyboard.send('right')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == 'Win':
            keyboard.send('windows')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == 'Enter':
            keyboard.send('enter')
            bot.delete_message(message.chat.id, message.message_id)
        elif text == '–î—Ä—É–≥–æ–µ':
            bot.send_message(message.chat.id, text="–î–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è 3 –º–µ—Ç–æ–¥–∞:\n‚îúsend('alt+f4')\n‚îúsend('–º','–∏','—Ä')\n‚îîwrite('–ü—Ä–∏–≤–µ—Ç!\\n–≠—Ç–æ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏')")
        elif text[:4] == 'send':
            try:
                eval("keyboard."+text)
            except Exception:
                42
        elif text[:5] == 'write':
            try:
                eval("keyboard."+text)
            except Exception:
                42
        elif text[:3] == '–∫–æ–¥':
            try:
                eval(text[4:])
            except Exception as e:
                bot.send_message(message.chat.id, text=e)
        elif text.lower()[:9] == '–∑–∞–≥—Ä—É–∑–∏—Ç—å':
            try:
                doc=open(text.lower()[10:], 'rb')
                bot.send_document(message.chat.id, doc)
                doc.close()
            except Exception as e:
                bot.send_message(message.chat.id, text=e)
        else:
            try:
                list_files = os.popen(text).read().encode('cp1251').decode('cp866')
                print(list_files)
                bot.send_message(message.chat.id, text=list_files)
            except Exception:
                try:
                    print("–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏")
                    
                    device = torch.device('cpu')
                    torch.set_num_threads(4)
                    local_file = 'model.pt'

                    if not os.path.isfile(local_file):
                        torch.hub.download_url_to_file('https://models.silero.ai/models/tts/ru/v3_1_ru.pt',
                                                       local_file)  

                    model = torch.package.PackageImporter(local_file).load_pickle("tts_models", "model")
                    model.to(device)

                    example_text = text
                    sample_rate = 48000
                    speaker='baya'

                    audio_paths = model.save_wav(text=example_text,
                                                 speaker=speaker,
                                                 sample_rate=sample_rate)
                    audio = open(r'test.wav', 'rb')
                    bot.send_voice(message.chat.id, audio)
                    audio.close()
                except Exception:
                    42
    else:
        device = torch.device('cpu')
        torch.set_num_threads(4)
        local_file = 'model.pt'

        if not os.path.isfile(local_file):
            torch.hub.download_url_to_file('https://models.silero.ai/models/tts/ru/v3_1_ru.pt',
                                                       local_file)  

        model = torch.package.PackageImporter(local_file).load_pickle("tts_models", "model")
        model.to(device)

        example_text = "–ê—Ö–∞—Ö–∞, –ø—Ä–æ–≤–∞–ª–∏–≤–∞–π"
        sample_rate = 48000
        speaker='baya'

        audio_paths = model.save_wav(text=example_text,
                                        speaker=speaker,
                                        sample_rate=sample_rate)
        audio = open(r'test.wav', 'rb')
        try:
            bot.send_voice(message.chat.id, audio)
        except Exception:
            bot.send_voice(message.from_user.id, audio)
        audio.close()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn0 = types.KeyboardButton("üíª–û —Å–∏—Å—Ç–µ–º–µ")
    btn1 = types.KeyboardButton("üåêIP-–∞–¥—Ä–µ—Å")
    btn2 = types.KeyboardButton("üèÅ–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    btn3 = types.KeyboardButton("üî´–£–±–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    btn4 = types.KeyboardButton("üñ•–°–∫—Ä–∏–Ω—à–æ—Ç")
    btn5 = types.KeyboardButton("üì∑–ö–∞–º–µ—Ä–∞")
    btn6 = types.KeyboardButton("üõë–í—ã–∫–ª—é—á–µ–Ω–∏–µ")
    btn7 = types.KeyboardButton("üîâ–ú–µ–¥–∏–∞/–≥—Ä–æ–º–∫–æ—Å—Ç—å")
    btn8 = types.KeyboardButton("‚å®–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞")
    btn9 = types.KeyboardButton("üì§üì•–§–∞–π–ª—ã")
    btn10 = types.KeyboardButton("üë®‚Äçüíª–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã")
    markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9, btn10)
    bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º!", reply_markup=markup)


@bot.message_handler(content_types=['voice'])
def voice_processing(message):
    filename = "voice"
    file_name_full="voice/"+filename+".ogg"
    file_name_full_converted="ready/"+filename+".wav"
    file_info = bot.get_file(message.voice.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(file_name_full, 'wb') as new_file:
        new_file.write(downloaded_file)
    os.system("ffmpeg.exe -i "+file_name_full+"  "+file_name_full_converted)
    text=recognise(file_name_full_converted)
    os.remove(file_name_full)
    os.remove(file_name_full_converted)

    comand(text, message)

@bot.message_handler(content_types=['document'])
def document_processing(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(message.document.file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
    except Exception as e:
        bot.send_message(message.chat.id, text=e)

@bot.message_handler(content_types=['text'])
def func(message):
    if(message.text == "üíª–û —Å–∏—Å—Ç–µ–º–µ"):
        text = ("–†–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: "+platform.architecture()[0]+"\n"+
            "–°–≤—è–∑—å —Å–∏—Å—Ç–µ–º—ã: "+platform.architecture()[1]+"\n"+
            "–¢–∏–ø –º–∞—à–∏–Ω—ã: "+platform.machine()+"\n"+
            "C–µ—Ç–µ–≤–æ–µ –∏–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: "+platform.node()+"\n"+
            "–ò–º—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: "+platform.platform()+"\n"+
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: "+platform.processor()+"\n"+
            "–í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: "+platform.release()+"\n"+
            "–ò–º—è —Å–∏—Å—Ç–µ–º—ã: "+platform.system()+"\n"+
            "–í–µ—Ä—Å–∏—è –≤—ã–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–∞: "+platform.version()+"\n"+
            "–ù–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏: "+platform.win32_ver()[1]+"\n"+
            "–ü–∞–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: "+platform.win32_ver()[2]+"\n"+
            "–¢–∏–ø –û–°: "+platform.win32_ver()[2]+"\n"+
            "–†–µ–¥–∞–∫—Ü–∏—è –û–°: "+platform.win32_edition())
        bot.send_message(message.chat.id, text=text)
    elif(message.text == "üåêIP-–∞–¥—Ä–µ—Å"):
        response = requests.get('http://ip-api.com/json/?fields=status,message,continent,continentCode,country,countryCode,region,regionName,city,district,zip,lat,lon,timezone,offset,currency,isp,org,as,asname,reverse,mobile,proxy,hosting,query')
        d = json.loads(response.text)
        t=" "
        for key in d:
            t = t+str(key)+": "+str(d[key])+"\n"
        bot.send_message(message.chat.id, text=t)
    elif(message.text == "üèÅ–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å Firefox', callback_data="start Firefox"))
        markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å –§–æ—Ç–æ—à–æ–ø', callback_data="C:\Program Files\Adobe\Adobe Photoshop 2022\Photoshop.exe"))
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=markup)
    elif(message.text == "üî´–£–±–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='–£–±–∏—Ç—å Firefox', callback_data="taskkill /IM firefox.exe /F"))
        markup.add(telebot.types.InlineKeyboardButton(text='–£–±–∏—Ç—å –§–æ—Ç–æ—à–æ–ø', callback_data="taskkill /IM Photoshop.exe /F"))
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=markup)
    elif(message.text == "üñ•–°–∫—Ä–∏–Ω—à–æ—Ç"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='–°–∫—Ä–∏–Ω—à–æ—Ç', callback_data="–°–∫—Ä–∏–Ω—à–æ—Ç"))
        markup.add(telebot.types.InlineKeyboardButton(text='–°—Ç—Ä–∏–º', callback_data="–°—Ç—Ä–∏–º"))
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=markup)
    elif(message.text == "üì∑–ö–∞–º–µ—Ä–∞"):
            markup = telebot.types.InlineKeyboardMarkup()
            x = 0
            for i in range(10):
                cam = cv2.VideoCapture(i)
                result, image = cam.read()
                if result:
                    markup.add(telebot.types.InlineKeyboardButton(text=("–ö–∞–º–µ—Ä–∞ "+str(i)), callback_data=("–ö–∞–º–µ—Ä–∞ "+str(i))))
                    x = x + 1
            if x == 0:
                bot.send_message(message.chat.id, text="–ö–∞–º–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                bot.send_message(message.chat.id, text="–°–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä", reply_markup=markup)
    elif(message.text == "üõë–í—ã–∫–ª—é—á–µ–Ω–∏–µ"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='–í—ã–∫–ª—é—á–∏—Ç—å', callback_data="shutdown /s /t 0"))
        markup.add(telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å', callback_data="shutdown /r /t 0"))
        markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data="Rundll32.exe user32.dll,LockWorkStation"))
        markup.add(telebot.types.InlineKeyboardButton(text='–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"))
        markup.add(telebot.types.InlineKeyboardButton(text='–í—ã–π—Ç–∏', callback_data="shutdown /l"))
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=markup)
    elif(message.text == "üîâ–ú–µ–¥–∏–∞/–≥—Ä–æ–º–∫–æ—Å—Ç—å"):
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(text='‚èÆ', callback_data="‚èÆ"))
        markup.add(telebot.types.InlineKeyboardButton(text='‚èπ', callback_data="‚èπ"))
        markup.add(telebot.types.InlineKeyboardButton(text='‚èØ', callback_data="‚èØ"))
        markup.add(telebot.types.InlineKeyboardButton(text='‚è≠', callback_data="‚è≠"))
        markup.add(telebot.types.InlineKeyboardButton(text='üîà', callback_data="üîà"))
        markup.add(telebot.types.InlineKeyboardButton(text='üîä', callback_data="üîä"))
        markup.add(telebot.types.InlineKeyboardButton(text='üîá', callback_data="üîá"))
        bot.send_message(message.chat.id, text="–ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:", reply_markup=markup)
    elif(message.text == "‚å®–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn0 = types.KeyboardButton("/start")
        btn1 = types.KeyboardButton("‚¨Ü")
        btn2 = types.KeyboardButton("‚ùå")
        btn3 = types.KeyboardButton("‚¨Ö")
        btn4 = types.KeyboardButton("‚¨á")
        btn5 = types.KeyboardButton("‚û°")
        btn6 = types.KeyboardButton("Win")
        btn7 = types.KeyboardButton("Enter")
        btn8 = types.KeyboardButton("–î—Ä—É–≥–æ–µ")
        markup.add(btn0, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8)
        bot.send_message(message.chat.id, text="–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=markup)
    elif(message.text == "üì§üì•–§–∞–π–ª—ã"):
        bot.send_message(message.chat.id, text="–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:\n–ó–∞–≥—Ä—É–∑–∏—Ç—å C:\\1.txt\n–î–ª—è –∑–∞–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å–µ –µ–≥–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç, –æ–Ω –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π.\n–õ–∏–º–∏—Ç—ã Telegram:\n‚îúüì•–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –±–æ—Ç—É20 –ú–ë\n‚îîüì§–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–æ–º —Ñ–∞–π–ª–∞ 50 –ú–ë\n")
    elif(message.text == "üë®‚Äçüíª–í–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã"):
        bot.send_message(message.chat.id, text="–§–æ—Ä–º–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–π –º–∞—à–∏–Ω–µ:\n‚îî–∫–æ–¥ print('Hello World')")
    else:
        comand(message.text, message)
@bot.callback_query_handler(func=lambda call: True)
def _worker(call):
    global Stream
    if call.data[:6].lower() == '–∫–∞–º–µ—Ä–∞':
        print(4)
        if -1 < int(call.data[7]) < 10:
            print(8)
            cam = cv2.VideoCapture(int(call.data[7]))
            result, image = cam.read()
            if result:
                cv2.imwrite("camera.png", image)
                photo=open('camera.png', 'rb')
                bot.send_document(call.from_user.id, photo)
                photo.close()
                os.remove('camera.png')
            else:
                bot.send_message(call.from_user.id, text="–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!:")
    elif call.data == '‚èÆ':
        Controller().press(KeyCode.from_vk(0xB1))
    elif call.data == '‚èπ':
        Controller().press(KeyCode.from_vk(0xB2))
    elif call.data == '‚èØ':
        Controller().press(KeyCode.from_vk(0xB3))
    elif call.data == '‚è≠':
        Controller().press(KeyCode.from_vk(0xB0))
    elif call.data == 'üîà':
        Controller().press(KeyCode.from_vk(0xAE ))
    elif call.data == 'üîä':
        Controller().press(KeyCode.from_vk(0xAF))
    elif call.data == 'üîá':
        Controller().press(KeyCode.from_vk(0xAD))
    elif call.data == '–ó–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º':
        Stream = False
        bot.send_message(call.from_user.id, text="–°—Ç—Ä–∏–º –∑–∞–∫—Ä—ã—Ç")
    elif call.data.lower() == '—Å–∫—Ä–∏–Ω—à–æ—Ç':
            screen = pyautogui.screenshot('screenshot.png')
            photo=open('screenshot.png', 'rb')
            bot.send_document(call.from_user.id, photo)
            photo.close()
            os.remove('screenshot.png')
    elif call.data.lower() == '—Å—Ç—Ä–∏–º':
            i = 1
            while True:
                if Stream == False:
                    Stream = True
                    break
                screen = pyautogui.screenshot()
                photo = screen.resize((640,360),Image.Resampling.LANCZOS)
                bot.delete_message(call.from_user.id, call.message.message_id+i-1)
                markup = telebot.types.InlineKeyboardMarkup()
                markup.add(telebot.types.InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º', callback_data="–ó–∞–∫—Ä—ã—Ç—å —Å—Ç—Ä–∏–º"))
                bot.send_photo(call.from_user.id, photo, reply_markup=markup)
                photo.close()
                i = i + 1
                time.sleep(5)
    else:
        comand(call.data, call)

while True:
    try:
        sys.stdout.write(("\r"+datetime.datetime.now().strftime("%H:%M:%S")+" –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...     \n"))
        time.sleep(1)
        #sys.stdout.flush()
        bot.polling()
    except Exception:
        sys.stdout.write(("\r"+datetime.datetime.now().strftime("%H:%M:%S")+" –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è...   "))
        sys.stdout.flush()
        sys.stdout.flush()
        time.sleep(1)
